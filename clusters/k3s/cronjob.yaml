apiVersion: batch/v1
kind: CronJob
metadata:
  name: mcp-agent-cronjob
  namespace: default
spec:
  # Run every 5 minutes for testing (change to "0 2 * * *" for daily at 2 AM)
  schedule: "0 2 * * *"
  concurrencyPolicy: Forbid
  successfulJobsHistoryLimit: 3
  failedJobsHistoryLimit: 3
  suspend: false  # Set to true to pause
  jobTemplate:
    spec:
      template:
        metadata:
          labels:
            app: mcp-agent-cronjob
        spec:
          containers:
          - name: mcp-agent
            image: wholelottahoopla/rarb:latest
            imagePullPolicy: Always
            command: ["node", "index.js"]
            args:
              - "--url"
              - "$(MCP_URL)"
              - "--model"
              - "$(MODEL)"
              - "--max-steps"
              - "$(MAX_STEPS)"
              - "--headless"
              - "--prompt"
              - "Go to craigslist and find free things in San Francisco posted today. URL: https://sfbay.craigslist.org/search/zip#search=2~gallery~0. First, use getRecentItems to check what's already in the database (look back 1 day). Then save interesting items to the database using saveItemsToDatabase. Only include interesting things - skip junk. For each item include: title, description, url, and set category to 'free stuff'. The database automatically prevents duplicates based on title and URL."
            env:
            - name: OPENAI_API_KEY
              valueFrom:
                secretKeyRef:
                  name: mcp-agent-secrets-test
                  key: OPENAI_API_KEY
            - name: MCP_URL
              valueFrom:
                configMapKeyRef:
                  name: mcp-agent-config
                  key: MCP_URL
            - name: MODEL
              valueFrom:
                configMapKeyRef:
                  name: mcp-agent-config
                  key: MODEL
            - name: MAX_STEPS
              valueFrom:
                configMapKeyRef:
                  name: mcp-agent-config
                  key: MAX_STEPS
            - name: NODE_ENV
              value: "production"
            # Database connection configuration
            - name: DB_HOST
              value: "postgres"
            - name: DB_PORT
              value: "5432"
            - name: DB_NAME
              value: "rarb_outputs"
            - name: DB_USER
              value: "sandbox"
            - name: DB_PASSWORD
              value: "CHANGE_ME"
            resources:
              requests:
                memory: "128Mi"
                cpu: "100m"
              limits:
                memory: "512Mi"
                cpu: "500m"
            securityContext:
              runAsNonRoot: true
              runAsUser: 1001
              allowPrivilegeEscalation: false
              readOnlyRootFilesystem: true
              capabilities:
                drop:
                - ALL
            volumeMounts:
            - name: tmp
              mountPath: /tmp
            - name: output
              mountPath: /output
          volumes:
          - name: tmp
            emptyDir: {}
          - name: output
            emptyDir: {}
          restartPolicy: OnFailure
